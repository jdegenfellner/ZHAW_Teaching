relocate(Wochentag_label, .after = Wochentag) %>%
dplyr::select(-Wochentag)
if( attr(ze$Dauer, which = "units") == "hours" ){
ze$Dauer <- ze$Dauer*60
}
ze$Dauer_ohne_Pausen <- ifelse(ze$Taetigkeit_allg == "Mittag" |
ze$Taetigkeit_allg == "Pause"|
ze$Taetigkeit_allg == "Dissertation", 0, ze$Dauer)
# 3) Statistics-----------------------------------------------------------------
# __Daily hours ----------------------------------------------------------------
ze %>% dplyr::group_by(Datum) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
mutate(Wochentag = lubridate::wday(Datum, label = TRUE)) %>%
relocate(Wochentag, .after = Datum) %>% tail()
# Only weekdays:
#ze %>%
#  filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
#  group_by(Datum) %>%
#  summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/60) %>%
# mutate(Wochentag = wday(Datum, label = TRUE)) %>%
#  relocate(Wochentag, .after = Datum) %>%
#  filter(Tagesarbeitszeit_ohne_Pausen > 0 )
# __Global mean, weekdays: ----
# TODO avearge working hours have to be calculated using ALL days but divide
# by the number of working days, otherwise work hours on weekends are lost.
ze %>%
filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
group_by(Datum) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
mutate(Wochentag = lubridate::wday(Datum, label = TRUE)) %>%
relocate(Wochentag, .after = Datum) %>%
filter(Tagesarbeitszeit_ohne_Pausen > 0) %>%
summarise(global_mean_workdays = mean(Tagesarbeitszeit_ohne_Pausen, na.rm = TRUE))
# # Global mean, weekdays (all):
# __Weekly h, Mo-Fr ------------------------------------------------------------
ze %>% group_by(KW) %>%
filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
summarise(Wochenarbeitszeiten_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
tail()
# __Weekend hours --------------------------------------------------------------
#ze %>% group_by(KW) %>%
#  filter(Wochentag_label %in% c("Sat","Sun")) %>%
#  summarise(Wochenende_Arbeitszeiten_ohne_Pausen = sum(Dauer_ohne_Pausen)/60)
# BOOKING in Pro-Time ----------------------------------------------------------
(df <- ze %>% filter(Taetigkeit_allg != "Mittag",
Taetigkeit_allg != "Pause",
Taetigkeit_allg != "Dissertation") %>%
filter(month(Datum) == 9) %>% # Feb=2/Mar=3...
group_by(Taetigkeit_allg) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600))
filename <- paste0("summary_", "Sep23", ".xlsx")
write_xlsx(df, filename)
# total work time: today ----
ze %>%
group_by(Taetigkeit_allg) %>%
filter(Datum == ze$Datum[length(ze$Datum)]) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: yesterday ----
ze %>%
group_by(Taetigkeit_allg) %>%
filter(Datum == ze$Datum[length(ze$Datum)] - days(1)) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: current week ----
ze %>%
mutate(week = week(Datum), year = year(Datum)) %>%
filter(week == week(today()) & year == year(today())) %>%
dplyr::group_by(Taetigkeit_allg) %>%
dplyr::summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE) / 3600) %>%
dplyr::summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: current month ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(month(Datum) == 9) %>% # Feb=2/Mar=3...
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# worked monthly work hours----
jan23 <- 179
feb23 <- 167
mar23 <- 215
apr23 <- 165
may23 <- 192
jun23 <- 179
jul23 <- 172
aug23 <- 200
sep23 <- 176.4
# EAV-Ergo Summe
#ze %>% filter(grepl( "EAV", Detail)) %>%
#  summarise(sum_EAV = sum(Dauer_ohne_Pausen)/60)
#Sandra Ulrich Summe:
#ze %>% filter(grepl( "Ulrich", Detail)) %>%
#    summarise(summe = sum(Dauer_ohne_Pausen)/3660)
# Summe PSP 9710.3.17.5.0075.01 (studentische Arbeiten):
#ze %>% filter(grepl( "9710.3.17.5.0075.01", Taetigkeit_allg)) %>%
#  summarise(summe = sum(Dauer_ohne_Pausen)/60)
# Summe MSc----
ze %>% filter(grepl( "MSc", Taetigkeit_allg)) %>%
summarise(summe = sum(Dauer_ohne_Pausen)/60)
# derzeit schon 467
# Persönliche Weiterbildung----
ze %>% filter(grepl( "Weiterbildung", Taetigkeit_allg)) %>%
filter(month(Datum) >= 8) %>% # Feb=2/Mar=3...
summarise(summe = sum(Dauer_ohne_Pausen)/3600)
# 1.1.-Ende Jul 23
# Soll: 97.58
# Ist: 132.2667
# 1.8.23 - Ende Jul 24:
# 168.00
# derzeit (5.9.23) 46.25h
# CAS Kurs: ca 9 Tage per 8h... 54h
# derzeit also sowas wie
54+46.25 # von 168 verplant
# Ferien ----
ze %>% filter(grepl( "Ferien", Taetigkeit_allg)) %>%
summarise(summe = sum(Dauer_ohne_Pausen)/3600)
# __bis Juli 23
ze %>% filter(grepl( "Ferien", Taetigkeit_allg)) %>%
filter( month(Datum) >=1 & month(Datum) <=7 ) %>%
summarise(summe = sum(Dauer_ohne_Pausen)/3600)
210*7/12 - 58.9 # übrig aus Jan23-Juli23
#63.6
# __ab August 23
ze %>% filter(grepl( "Ferien", Taetigkeit_allg)) %>%
filter( month(Datum) >7 ) %>%
summarise(summe = sum(Dauer_ohne_Pausen)/3600) # Kroatien ca 1 Woche
# insg in Jahresperiode zur Verfügung: 210 h
210-56.55 # derzeit (5.9.23) übrig
(210-56.55)/8.4# Tage
# Soll/Ist Vergleich----
soll <- c(176.4, 159.6, 193.2, 148.76, 165.65, 184.8, 176.4, 184.4) # Jan-Apr (Excel-file....SJ_22-23_Brutto-Arbeitszeiten)
(ist_soll <- c(jan23, feb23, mar23, apr23, may23, jun23, jul23, aug23) - soll)
sum(ist_soll)
# total work time: today ----
ze %>%
group_by(Taetigkeit_allg) %>%
filter(Datum == ze$Datum[length(ze$Datum)]) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# Code for tracking work hours at ZHAW #
# Especially single activities (work for projects, teaching and co)
# should be tracked in more detail to gain knowledge about my productivity
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load packages-----------------------------------------------------------------
library(pacman)
pacman::p_load(readxll, tidyverse, lubridate, writexl
)
# TODO
# Brutto/Netto-Arbeitszeit
# Dissertation optional inkludieren
# Soll/Ist vergleich mit ILV
# 1) READ (until first NA in column "KW")---------------------------------------
# Read function for multiple sheets
read_zeiterfassung <- function(sheets){
if(length(sheets) == 1){
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets)
first_NA <- min(which(is.na(ze$KW)))
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets, n_max = first_NA)
} else if (length(sheets) > 1) {
n <- length(sheets)
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[1])
first_NA <- min(which(is.na(ze$KW)))
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[1], n_max = first_NA)
for(i in 2:n){
ze_add <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[i])
if( sum(is.na(ze_add$KW)) == 0 ) {
read_to <- dim(ze_add)[1]
} else {
read_to <- min(which(is.na(ze_add$KW)))
}
ze_add <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[i], n_max = read_to)
ze <- rbind(ze, ze_add)
}
}
return(ze)
}
sheets = c("Jan23", "Feb23", "Mar23", "Apr23", "May23","Jun23",
"Jul23","Aug23","Sep23", "Okt23")
ze <- read_zeiterfassung(sheets = sheets)
# 2) ADAPT input----------------------------------------------------------------
ze <- ze %>% dplyr::select(-Dauer) %>%
mutate(Dauer = Ende - Beginn) %>%
relocate(Dauer, .after = Ende) %>%
mutate(Wochentag_label = lubridate::wday(Wochentag, label = TRUE)) %>%
relocate(Wochentag_label, .after = Wochentag) %>%
dplyr::select(-Wochentag)
if( attr(ze$Dauer, which = "units") == "hours" ){
ze$Dauer <- ze$Dauer*60
}
ze$Dauer_ohne_Pausen <- ifelse(ze$Taetigkeit_allg == "Mittag" |
ze$Taetigkeit_allg == "Pause"|
ze$Taetigkeit_allg == "Dissertation", 0, ze$Dauer)
# 3) Statistics-----------------------------------------------------------------
# __Daily hours ----------------------------------------------------------------
ze %>% dplyr::group_by(Datum) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
mutate(Wochentag = lubridate::wday(Datum, label = TRUE)) %>%
relocate(Wochentag, .after = Datum) %>% tail()
# Only weekdays:
#ze %>%
#  filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
#  group_by(Datum) %>%
#  summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/60) %>%
# mutate(Wochentag = wday(Datum, label = TRUE)) %>%
#  relocate(Wochentag, .after = Datum) %>%
#  filter(Tagesarbeitszeit_ohne_Pausen > 0 )
# __Global mean, weekdays: ----
# TODO avearge working hours have to be calculated using ALL days but divide
# by the number of working days, otherwise work hours on weekends are lost.
ze %>%
filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
group_by(Datum) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
mutate(Wochentag = lubridate::wday(Datum, label = TRUE)) %>%
relocate(Wochentag, .after = Datum) %>%
filter(Tagesarbeitszeit_ohne_Pausen > 0) %>%
summarise(global_mean_workdays = mean(Tagesarbeitszeit_ohne_Pausen, na.rm = TRUE))
# # Global mean, weekdays (all):
# __Weekly h, Mo-Fr ------------------------------------------------------------
ze %>% group_by(KW) %>%
filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
summarise(Wochenarbeitszeiten_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
tail()
# __Weekend hours --------------------------------------------------------------
#ze %>% group_by(KW) %>%
#  filter(Wochentag_label %in% c("Sat","Sun")) %>%
#  summarise(Wochenende_Arbeitszeiten_ohne_Pausen = sum(Dauer_ohne_Pausen)/60)
# BOOKING in Pro-Time ----------------------------------------------------------
(df <- ze %>% filter(Taetigkeit_allg != "Mittag",
Taetigkeit_allg != "Pause",
Taetigkeit_allg != "Dissertation") %>%
filter(month(Datum) == 9) %>% # Feb=2/Mar=3...
group_by(Taetigkeit_allg) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600))
filename <- paste0("summary_", "Sep23", ".xlsx")
write_xlsx(df, filename)
# total work time: today ----
ze %>%
group_by(Taetigkeit_allg) %>%
filter(Datum == ze$Datum[length(ze$Datum)]) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: yesterday ----
ze %>%
group_by(Taetigkeit_allg) %>%
filter(Datum == ze$Datum[length(ze$Datum)] - days(1)) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: current week ----
ze %>%
mutate(week = week(Datum), year = year(Datum)) %>%
filter(week == week(today()) & year == year(today())) %>%
dplyr::group_by(Taetigkeit_allg) %>%
dplyr::summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE) / 3600) %>%
dplyr::summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: current month ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(month(Datum) == 9) %>% # Feb=2/Mar=3...
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# worked monthly work hours----
jan23 <- 179
feb23 <- 167
mar23 <- 215
apr23 <- 165
may23 <- 192
jun23 <- 179
jul23 <- 172
aug23 <- 200
sep23 <- 176.4
# EAV-Ergo Summe
#ze %>% filter(grepl( "EAV", Detail)) %>%
#  summarise(sum_EAV = sum(Dauer_ohne_Pausen)/60)
#Sandra Ulrich Summe:
#ze %>% filter(grepl( "Ulrich", Detail)) %>%
#    summarise(summe = sum(Dauer_ohne_Pausen)/3660)
# Summe PSP 9710.3.17.5.0075.01 (studentische Arbeiten):
#ze %>% filter(grepl( "9710.3.17.5.0075.01", Taetigkeit_allg)) %>%
#  summarise(summe = sum(Dauer_ohne_Pausen)/60)
# Summe MSc----
ze %>% filter(grepl( "MSc", Taetigkeit_allg)) %>%
summarise(summe = sum(Dauer_ohne_Pausen)/60)
# derzeit schon 467
# Persönliche Weiterbildung----
ze %>% filter(grepl( "Weiterbildung", Taetigkeit_allg)) %>%
filter(month(Datum) >= 8) %>% # Feb=2/Mar=3...
summarise(summe = sum(Dauer_ohne_Pausen)/3600)
# 1.1.-Ende Jul 23
# Soll: 97.58
# Ist: 132.2667
# 1.8.23 - Ende Jul 24:
# 168.00
# derzeit (5.9.23) 46.25h
# CAS Kurs: ca 9 Tage per 8h... 54h
# derzeit also sowas wie
54+46.25 # von 168 verplant
# Ferien ----
ze %>% filter(grepl( "Ferien", Taetigkeit_allg)) %>%
summarise(summe = sum(Dauer_ohne_Pausen)/3600)
# __bis Juli 23
ze %>% filter(grepl( "Ferien", Taetigkeit_allg)) %>%
filter( month(Datum) >=1 & month(Datum) <=7 ) %>%
summarise(summe = sum(Dauer_ohne_Pausen)/3600)
210*7/12 - 58.9 # übrig aus Jan23-Juli23
#63.6
# __ab August 23
ze %>% filter(grepl( "Ferien", Taetigkeit_allg)) %>%
filter( month(Datum) >7 ) %>%
summarise(summe = sum(Dauer_ohne_Pausen)/3600) # Kroatien ca 1 Woche
# insg in Jahresperiode zur Verfügung: 210 h
210-56.55 # derzeit (5.9.23) übrig
(210-56.55)/8.4# Tage
# Soll/Ist Vergleich----
soll <- c(176.4, 159.6, 193.2, 148.76, 165.65, 184.8, 176.4, 184.4) # Jan-Apr (Excel-file....SJ_22-23_Brutto-Arbeitszeiten)
(ist_soll <- c(jan23, feb23, mar23, apr23, may23, jun23, jul23, aug23) - soll)
sum(ist_soll)
# total work time: today ----
ze %>%
group_by(Taetigkeit_allg) %>%
filter(Datum == ze$Datum[length(ze$Datum)]) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
res1 <- smpsize_lmm(
eff.size = 0.3,
df.n = 7, # Number of predictors in the model
power = 0.8,
sig.level = 0.05,
k = 52 # Number time points (assumption for a 1-level design)
)
res1
res1 <- smpsize_lmm(
eff.size = 0.3,
df.n = 7, # Number of predictors in the model
power = 0.8,
sig.level = 0.05,
k = 512 # Number time points (assumption for a 1-level design)
)
res1 <- smpsize_lmm(
eff.size = 0.3,
df.n = 7, # Number of predictors in the model
power = 0.8,
sig.level = 0.05,
k = 12 # Number time points (assumption for a 1-level design)
)
res1
res1 <- smpsize_lmm(
eff.size = 0.3,
df.n = 6, # Number of predictors in the model
power = 0.8,
sig.level = 0.05,
k = 12 # Number time points (assumption for a 1-level design)
)
res1
res1 <- smpsize_lmm(
eff.size = 0.3,
df.n = 6, # Number of predictors in the model
power = 0.8,
sig.level = 0.05,
k = 3 # Number time points (assumption for a 1-level design)
)
res1
# Set working directory----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #  to source file location
# Packages----
library(pacman) # installs the package if necessary and loads it for use.
pacman::p_load(
broom,
car,
tidyverse,
plotly,
vcd,
lme4,
brms,
tictoc,
geepack,
merTools,
Hmisc,
lmerTest,
MuMIn,
performance,
nlme,          # inlcudes gls(), generalized least squares regression
bestNormalize,
gstat, # includes variogram()
quantreg,
visdat,
twopartm,
hrbrthemes
)
# Boxplots vs. nicer ones
set.seed(123)
# Create sample data
normal_data <- rnorm(100, mean = 20, sd = 5)
outliers <- c(40, 45, 50)
data <- c(normal_data, outliers)
df <- data.frame(var = data)
# Create a simple boxplot
ggplot(df, aes(x = factor(1), y = var)) +
geom_boxplot() +
xlab('')
# Create a violin plot with jitter
ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2, aes(color = factor(1))) +
xlab('') +
theme_minimal()  # this makes the plot look nicer
# Create a violin plot with jitter
ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2) +
xlab('') +
theme_minimal()  # this makes the plot look nicer
# Create a violin plot with jitter
ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2) +
xlab('') +
coord_flip() +
theme_minimal()  # this makes the plot look nicer
# Create a violin plot with jitter
ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2) +
xlab('') +
coord_flip() +
ggtitle("Example of violin plot") +
theme(plot.title = element_text(hjust = 0.5))
# Create a violin plot with jitter
ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2) +
xlab('') +
coord_flip() +
ggtitle("Example of violin plot with raw data using jitter") +
theme(plot.title = element_text(hjust = 0.5))
# Boxplots vs. nicer ones
set.seed(123)
# Create sample data
normal_data <- rnorm(100, mean = 20, sd = 5)
outliers <- c(40, 45, 50)
# Boxplots vs. nicer ones----
set.seed(123)
# Create sample data
normal_data <- rnorm(100, mean = 20, sd = 5)
outliers <- c(40, 45, 50)
data <- c(normal_data, outliers)
df <- data.frame(var = data)
# Create a simple boxplot
ggplot(df, aes(x = factor(1), y = var)) +
geom_boxplot() +
xlab('')
# Create a violin plot with jitter
ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2) +
xlab('') +
coord_flip() +
ggtitle("Example of violin plot with raw data using jitter") +
theme(plot.title = element_text(hjust = 0.5))
# Create a violin plot with jitter
ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2) +
xlab('Variable-value') +
coord_flip() +
ggtitle("Example of violin plot with raw data using jitter") +
theme(plot.title = element_text(hjust = 0.5))
# Create a violin plot with jitter
ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2) +
xlab('') + ylab('Variable-value')
# Create a violin plot with jitter
ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2) +
xlab('') + ylab('Variable-value')
# Create a violin plot with jitter
ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2) +
xlab('') + ylab('Variable-value')
# Create a violin plot with jitter
ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2) +
xlab('') + ylab('Variable-value') +
coord_flip() +
ggtitle("Example of violin plot with raw data using jitter") +
theme(plot.title = element_text(hjust = 0.5))
# Create a violin plot with jitter
p1 <- ggplot(df, aes(x = factor(1), y = var)) +
geom_violin() +
geom_jitter(width = 0.2) +
xlab('') + ylab('Variable-value') +
coord_flip() +
ggtitle("Example of violin plot with raw data using jitter") +
theme(plot.title = element_text(hjust = 0.5))
p1
pdf(p1, "violin_plot.pdf")
ggsave(filename = "violin_plot.pdf", plot = p1)
ggsave(filename = "./images/violin_plot.pdf", plot = p1)
p2 <- boxplot(df$var)
p2
p2
print(p2)
boxplot(df$var)
boxplot(df$var)
df$var
?boxplot
boxplot(var, data=df)
boxplot(df$var, data=df)
boxplot(df$var)
