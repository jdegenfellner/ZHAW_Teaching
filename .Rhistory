data.frame(chis_test_stat = chis_test_stat) %>%
ggplot(aes(chis_test_stat)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
stat_function(fun = function(x) dchisq(x, df = 99),
color = "red", size = 1.2) +
labs(title = "Chi-squared Test Statistic Distribution",
x = "Chi-squared Test Statistic",
y = "Density") +
theme_minimal()
library(ggplot2)
# Initialize a vector to store the test statistics
chis_test_stat <- numeric(10000)
# Simulate the test statistics
for(i in 1:10000){
x <- rbinom(100, 1, 0.7) # true proportion of women 0.7
sigma_true <- sqrt(0.7 * (1 - 0.7)) # true standard deviation
chis_test_stat[i] <- var(x) * (100 - 1) / sigma_true^2 # Use var() for unbiased sample variance
}
# Create a density-scaled histogram
data.frame(chis_test_stat = chis_test_stat) %>%
ggplot(aes(chis_test_stat)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
stat_function(fun = function(x) dchisq(x, df = 99),
color = "red", size = 1.2) +
labs(title = "Chi-squared Test Statistic Distribution",
x = "Chi-squared Test Statistic",
y = "Density") +
theme_minimal()
library(ggplot2)
# Initialize a vector to store the test statistics
chis_test_stat <- numeric(10000)
# Simulate the test statistics
for(i in 1:10000){
x <- rbinom(100, 1, 0.7) # true proportion of women 0.7
sigma_true <- sqrt(0.7 * (1 - 0.7)) # true standard deviation
chis_test_stat[i] <- var(x) * (100 - 1) / sigma_true^2 # Use var() for unbiased sample variance
}
# Create a density-scaled histogram
data.frame(chis_test_stat = chis_test_stat) %>%
ggplot(aes(chis_test_stat)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
stat_function(fun = function(x) dchisq(x, df = 99),
color = "red", size = 1.2) +
labs(title = "Chi-squared Test Statistic Distribution",
x = "Chi-squared Test Statistic",
y = "Density") +
theme_minimal()
library(ggplot2)
# Initialize a vector to store the test statistics
chis_test_stat <- numeric(10000)
# Simulate the test statistics
for(i in 1:10000){
x <- rbinom(100, 1, 0.7) # true proportion of women 0.7
sigma_true <- sqrt(0.7 * (1 - 0.7)) # true standard deviation
chis_test_stat[i] <- var(x) * (100 - 1) / sigma_true^2 # Use var() for unbiased sample variance
}
# Create a density-scaled histogram
data.frame(chis_test_stat = chis_test_stat) %>%
ggplot(aes(chis_test_stat)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
stat_function(fun = function(x) dchisq(x, df = 99),
color = "red", size = 1.2) +
labs(title = "Chi-squared Test Statistic Distribution",
x = "Chi-squared Test Statistic",
y = "Density") +
theme_minimal()
library(ggplot2)
# Initialize a vector to store the test statistics
chis_test_stat <- numeric(10000)
# Simulate the test statistics
for(i in 1:10000){
x <- rbinom(100, 1, 0.7) # true proportion of women 0.7
sigma_true <- sqrt(0.7 * (1 - 0.7)) # true standard deviation
chis_test_stat[i] <- var(x) * (100 - 1) / sigma_true^2 # Use var() for unbiased sample variance
}
# Create a density-scaled histogram
data.frame(chis_test_stat = chis_test_stat) %>%
ggplot(aes(chis_test_stat)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
stat_function(fun = function(x) dchisq(x, df = 99),
color = "red", size = 1.2) +
labs(title = "Chi-squared Test Statistic Distribution",
x = "Chi-squared Test Statistic",
y = "Density") +
theme_minimal()
library(ggplot2)
# Initialize a vector to store the test statistics
chis_test_stat <- numeric(10000)
# Simulate the test statistics
for(i in 1:10000){
x <- rbinom(100, 1, 0.7) # true proportion of women 0.7
sigma_true <- sqrt(0.7 * (1 - 0.7)) # true standard deviation
chis_test_stat[i] <- var(x) * (100 - 1) / sigma_true^2 # Use var() for unbiased sample variance
}
# Create a density-scaled histogram
data.frame(chis_test_stat = chis_test_stat) %>%
ggplot(aes(chis_test_stat)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
stat_function(fun = function(x) dchisq(x, df = 99),
color = "red", size = 1.2) +
labs(title = "Chi-squared Test Statistic Distribution",
x = "Chi-squared Test Statistic",
y = "Density") +
theme_minimal()
library(ggplot2)
# Initialize a vector to store the test statistics
chis_test_stat <- numeric(10000)
# Simulate the test statistics
for(i in 1:10000){
x <- rbinom(100, 1, 0.7) # true proportion of women 0.7
sigma_true <- sqrt(0.7 * (1 - 0.7)) # true standard deviation
chis_test_stat[i] <- var(x) * (100 - 1) / sigma_true^2 # Use var() for unbiased sample variance
}
# Create a density-scaled histogram
data.frame(chis_test_stat = chis_test_stat) %>%
ggplot(aes(chis_test_stat)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
stat_function(fun = function(x) dchisq(x, df = 99),
color = "red", size = 1.2) +
labs(title = "Chi-squared Test Statistic Distribution",
x = "Chi-squared Test Statistic",
y = "Density") +
theme_minimal()
library(ggplot2)
# Initialize a vector to store the test statistics
chis_test_stat <- numeric(10000)
# Simulate the test statistics
for(i in 1:10000){
x <- rbinom(100, 1, 0.7) # true proportion of women 0.7
sigma_true <- sqrt(0.7 * (1 - 0.7)) # true standard deviation
chis_test_stat[i] <- var(x) * (100 - 1) / sigma_true^2 # Use var() for unbiased sample variance
}
# Create a density-scaled histogram
data.frame(chis_test_stat = chis_test_stat) %>%
ggplot(aes(chis_test_stat)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
stat_function(fun = function(x) dchisq(x, df = 99),
color = "red", size = 1.2) +
labs(title = "Chi-squared Test Statistic Distribution",
x = "Chi-squared Test Statistic",
y = "Density") +
theme_minimal()
library(ggplot2)
# Initialize a vector to store the test statistics
chis_test_stat <- numeric(10000)
# Simulate the test statistics
for(i in 1:10000){
x <- rbinom(100, 1, 0.7) # true proportion of women 0.7
sigma_true <- sqrt(0.7 * (1 - 0.7)) # true standard deviation
chis_test_stat[i] <- var(x) * (100 - 1) / sigma_true^2 # Use var() for unbiased sample variance
}
# Create a density-scaled histogram
data.frame(chis_test_stat = chis_test_stat) %>%
ggplot(aes(chis_test_stat)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
stat_function(fun = function(x) dchisq(x, df = 99),
color = "red", size = 1.2) +
labs(title = "Chi-squared Test Statistic Distribution",
x = "Chi-squared Test Statistic",
y = "Density") +
theme_minimal()
# 2) t.test
# based on the CLT
t.test(x, y) # Welch's t-test.
# 3) prop.test in R
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test
prop.test( c(sum(x), sum(y)), c(100, 100), correct = FALSE ) # two-sided test
# Sex differences in groups
( x <- rbinom(100, 1, 0.7) ) # true prop of women 0.7
( y <- rbinom(100, 1, 0.4) ) # true prop of women 0.4
( p_x <- mean(x) )
( p_y <- mean(y) )
( p_diff <- p_x - p_y )
( se_diff <- sqrt( p_x*(1-p_x)/100 + p_y*(1-p_y)/100 ) )
( z <- p_diff / se_diff )
( p_value <- 2*pnorm(-abs(z)) ) # two-sided test
# 2) t.test
# based on the CLT
t.test(x, y) # Welch's t-test.
# 3) prop.test in R
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test
prop.test( c(sum(x), sum(y)), c(100, 100), correct = FALSE ) # two-sided test
# 3) prop.test in R
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test
prop.test( c(sum(x), sum(y)), c(100, 100), correct = FALSE ) # two-sided test
?prop.test
# manually
expected_in_x <- 100*0.7
# manually
expected_in_x <- 100*0.7
prop.test( c(sum(x), sum(y)), c(100, 100), correct = TRUE )
# 3) prop.test in R
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test
prop.test( c(sum(x), sum(y)), c(100, 100), correct = FALSE ) # two-sided test
# manually
expected_in_x <- 100*0.7
expected_in_y <- 100*0.4
( chi2 <- (sum(x) - expected_in_x)^2 / expected_in_x + (sum(y) - expected_in_y)^2 / expected_in_y )
( p_value <- 1 - pchisq(chi2, 1) ) # two-sided test
# manually
expected_in_x <- 100*0.7
expected_in_y <- 100*0.4
( chi2 <- (sum(x) - expected_in_x)^2 / expected_in_x + (sum(y) - expected_in_y)^2 / expected_in_y )
( p_value <- 1 - pchisq(chi2, 1) ) # two-sided test
# manually
expected_in_x <- 100*0.5
expected_in_y <- 100*0.5
( chi2 <- (sum(x) - expected_in_x)^2 / expected_in_x + (sum(y) - expected_in_y)^2 / expected_in_y )
( p_value <- 1 - pchisq(chi2, 1) ) # two-sided test
# manually:
# Observed counts
obs_x <- sum(x) # Replace with your observed value for group 1
obs_y <- sum(y) # Replace with your observed value for group 2
# Total observations
n_x <- 100 # Size of group 1
n_y <- 100 # Size of group 2
# Pooled proportion under H0
p_hat <- (obs_x + obs_y) / (n_x + n_y)
# Expected counts
exp_x <- p_hat * n_x
exp_y <- p_hat * n_y
# Chi-squared statistic calculation
chi_squared <- ((obs_x - exp_x)^2 / exp_x) + ((obs_y - exp_y)^2 / exp_y)
# Print the result
chi_squared
( p_value <- 1 - pchisq(chi_squared, 1) ) # two-sided test
# 3) prop.test in R
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test
prop.test( c(sum(x), sum(y)), c(100, 100), correct = FALSE ) # two-sided test; H_0: p_x = p_y
chisq.test( cbind(c(sum(x), sum(y)), c(100, 100)) ) # two-sided test; H_0: p_x = p_y
chisq.test( cbind(c(sum(x), sum(y)), c(100, 100)), correct = FALSE ) # two-sided test; H_0: p_x = p_y
# manually:
# Observed counts
obs_x <- sum(x) # Replace with your observed value for group 1
obs_y <- sum(y) # Replace with your observed value for group 2
# Total observations
n_x <- 100 # Size of group 1
n_y <- 100 # Size of group 2
# Pooled proportion under H0
p_hat <- (obs_x + obs_y) / (n_x + n_y)
# Expected counts
exp_x <- p_hat * n_x
exp_y <- p_hat * n_y
# Chi-squared statistic calculation
chi_squared <- ((obs_x - exp_x)^2 / exp_x) + ((obs_y - exp_y)^2 / exp_y)
# Print the result
chi_squared
( p_value <- 1 - pchisq(chi_squared, 1) ) # two-sided test
chisq.test( cbind(c(sum(x), sum(y)), c(100, 100)), correct = FALSE ) # two-sided test; H_0: p_x = p_y
chisq.test( cbind(c(sum(x), sum(y)), c(100, 100)), correct = TRUE )
( x <- rbinom(100, 1, 0.7) ) # true prop of women 0.7
( y <- rbinom(100, 1, 0.4) ) # true prop of women 0.4
( p_x <- mean(x) )
( p_y <- mean(y) )
# 3) prop.test in R
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test
prop.test( c(sum(x), sum(y)), c(100, 100), correct = FALSE ) # two-sided test; H_0: p_x = p_y
# manually:
# Observed counts
obs_x <- sum(x) # Total successes in group 1
obs_y <- sum(y) # Total successes in group 2
# Total observations
n_x <- length(x) # Size of group 1
n_y <- length(y) # Size of group 2
# Pooled proportion under H0
p_hat <- (obs_x + obs_y) / (n_x + n_y)
# Expected counts under H0
exp_x <- p_hat * n_x
exp_y <- p_hat * n_y
# Calculate the chi-squared test statistic
chi_squared <- ((obs_x - exp_x)^2 / exp_x) + ((obs_y - exp_y)^2 / exp_y)
# Print the chi-squared value
chi_squared
# 3) prop.test in R
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test
prop.test( c(sum(x), sum(y)), c(100, 100), correct = FALSE ) # two-sided test; H_0: p_x = p_y
# manually:
# Observed counts
obs_x <- sum(x) # Total successes in group 1
obs_y <- sum(y) # Total successes in group 2
# Total observations
n_x <- length(x) # Size of group 1
n_y <- length(y) # Size of group 2
# Pooled proportion under H0
p_hat <- (obs_x + obs_y) / (n_x + n_y)
# Expected counts under H0
exp_x <- p_hat * n_x
exp_y <- p_hat * n_y
# Calculate the chi-squared test statistic
( chi_squared <- ((obs_x - exp_x)^2 / exp_x) + ((obs_y - exp_y)^2 / exp_y) )
# 3) prop.test in R
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test
prop.test( c(sum(x), sum(y)), c(100, 100), correct = FALSE ) # two-sided test; H_0: p_x = p_y
# manually:
# Observed counts
obs_x <- sum(x) # Total successes in group 1
obs_y <- sum(y) # Total successes in group 2
# Total observations
n_x <- length(x) # Size of group 1
n_y <- length(y) # Size of group 2
# Pooled proportion under H0
p_hat <- (obs_x + obs_y) / (n_x + n_y)
# Expected counts under H0
exp_x <- p_hat * n_x
exp_y <- p_hat * n_y
# Calculate the chi-squared test statistic
( chi_squared <- ((obs_x - exp_x)^2 / exp_x) + ((obs_y - exp_y)^2 / exp_y) )
# manually:
# Observed counts and total observations
obs_x <- sum(x) # Total successes in group 1
obs_y <- sum(y) # Total successes in group 2
n_x <- length(x) # Size of group 1
n_y <- length(y) # Size of group 2
# Proportions in each group
p_x <- obs_x / n_x
p_y <- obs_y / n_y
# Pooled proportion under H0
p_hat <- (obs_x + obs_y) / (n_x + n_y)
# Standard error of the difference under H0
SE_p <- sqrt(p_hat * (1 - p_hat) * (1 / n_x + 1 / n_y))
# Chi-squared test statistic
chi_squared <- (p_x - p_y)^2 / SE_p^2
# Print the chi-squared value
chi_squared
# 3) prop.test in R
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test
prop.test( c(sum(x), sum(y)), c(100, 100), correct = FALSE ) # two-sided test; H_0: p_x = p_y
# manually:
# Observed counts and total observations
obs_x <- sum(x) # Total successes in group 1
obs_y <- sum(y) # Total successes in group 2
n_x <- length(x) # Size of group 1
n_y <- length(y) # Size of group 2
# Proportions in each group
p_x <- obs_x / n_x
p_y <- obs_y / n_y
# Pooled proportion under H0
p_hat <- (obs_x + obs_y) / (n_x + n_y)
# Standard error of the difference under H0
SE_p <- sqrt(p_hat * (1 - p_hat) * (1 / n_x + 1 / n_y))
# Chi-squared test statistic
chi_squared <- (p_x - p_y)^2 / SE_p^2
# Print the chi-squared value
chi_squared
# 3) prop.test in R
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test
prop.test( c(sum(x), sum(y)), c(100, 100), correct = FALSE ) # two-sided test; H_0: p_x = p_y
# manually:
# Observed counts and total observations
obs_x <- sum(x) # Total successes in group 1
obs_y <- sum(y) # Total successes in group 2
n_x <- length(x) # Size of group 1
n_y <- length(y) # Size of group 2
# Proportions in each group
p_x <- obs_x / n_x
p_y <- obs_y / n_y
# Pooled proportion under H0
p_hat <- (obs_x + obs_y) / (n_x + n_y)
# Standard error of the difference under H0
SE_p <- sqrt(p_hat * (1 - p_hat) * (1 / n_x + 1 / n_y))
# Chi-squared test statistic
chi_squared <- (p_x - p_y)^2 / SE_p^2
# Print the chi-squared value
chi_squared
# 3) prop.test in R
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test
prop.test( c(sum(x), sum(y)), c(100, 100), correct = FALSE ) # two-sided test; H_0: p_x = p_y
x <- rnorm(100, mean = 0, sd = 1)
y <- 1.3*x + rnorm(100, mean = 0, sd = 1)
plot(x, y)
cor(x, y)
cov(x, y)
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 1.3*x + rnorm(100, mean = 0, sd = 1)
plot(x, y)
cov(x, y)
cor(x, y)
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 0*x + rnorm(100, mean = 0, sd = 1)
plot(x, y)
cov(x, y)
cor(x, y)
sd(x)
sd(y)
cov(x, y)
cor(x, y)
sd(x)*sd(y)
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 1*x + rnorm(100, mean = 0, sd = 1)
sd(x)*sd(y)
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 2*x + rnorm(100, mean = 0, sd = 1)
sd(x)*sd(y)
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 1*x + rnorm(100, mean = 0, sd = 1)
cor(x, y)
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 1*x + rnorm(100, mean = 0, sd = 0.5)
cor(x, y)
ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point() +
geom_vline(xintercept = mean(x), color = "red") +
geom_hline(yintercept = mean(y), color = "blue") +
theme_minimal()
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 1*x + rnorm(100, mean = 0, sd = 1)
cor(x, y)
ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point() +
geom_vline(xintercept = mean(x), color = "red") +
geom_hline(yintercept = mean(y), color = "blue") +
theme_minimal()
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 1*x + rnorm(100, mean = 0, sd = 0.1)
cor(x, y)
ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point() +
geom_vline(xintercept = mean(x), color = "red") +
geom_hline(yintercept = mean(y), color = "blue") +
theme_minimal()
y <- -1*x + rnorm(100, mean = 0, sd = 0.1)
ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point() +
geom_vline(xintercept = mean(x), color = "red") +
geom_hline(yintercept = mean(y), color = "blue") +
theme_minimal()
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 0*x + rnorm(100, mean = 0, sd = 0.1)
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 0*x + rnorm(100, mean = 0, sd = 1)
sd(x)
sd(y)
cov(x, y)
cor(x, y)
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 1*x + rnorm(100, mean = 0, sd = 1)
sd(x)
sd(y)
sd(x)*sd(y)
cov(x, y)
cor(x, y)
ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point() +
geom_vline(xintercept = mean(x), color = "red") +
geom_hline(yintercept = mean(y), color = "blue") +
theme_minimal()
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 1*x + rnorm(100, mean = 0, sd = 0.1)
sd(x)
sd(y)
y <- 1*x + rnorm(100, mean = 0, sd = 0.1)
sd(x)
sd(y)
sd(x)*sd(y)
cov(x, y)
cor(x, y)
ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point() +
geom_vline(xintercept = mean(x), color = "red") +
geom_hline(yintercept = mean(y), color = "blue") +
theme_minimal()
set.seed(123)
x <- rnorm(100, mean = 0, sd = 1)
y <- 1*x + rnorm(100, mean = 0, sd = 1)
sd(x)
sd(y)
sd(x)*sd(y)
cov(x, y)
cor(x, y)
set.seed(123)
x <- rnorm(100, mean = 0, sd = 0.1)
y <- 1*x + rnorm(100, mean = 0, sd = 0.11)
sd(x)
sd(y)
sd(x)*sd(y)
cov(x, y)
cor(x, y)
ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point() +
geom_vline(xintercept = mean(x), color = "red") +
geom_hline(yintercept = mean(y), color = "blue") +
theme_minimal()
set.seed(123)
x <- rnorm(100, mean = 0, sd = 0.1)
y <- 1*x + rnorm(100, mean = 0, sd = 0.1)
sd(x)
sd(y)
sd(x)*sd(y)
cov(x, y)
cor(x, y)
ggplot(data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point() +
geom_vline(xintercept = mean(x), color = "red") +
geom_hline(yintercept = mean(y), color = "blue") +
theme_minimal()
?log
