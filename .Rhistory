# Get your packages - functional extensions to base R:--------
if (!require(pacman)) {
install.packages("pacman")
library(pacman) # Install and load package in one
}
pacman::p_load(tidyverse, # https://tidyverse.tidyverse.org/
readxl,
writexl, # read write Excel files
DataExplorer, # Data overview
gtsummary, # Creates presentation-ready tables
table1, # nice table 1
flextable, # nicer tables
nycflights13, gapminder, Lahman, # data sets
devtools, # Collection of package development tools.
lubridate, # date functions
Hmisc, # Harrell Miscellaneous
data.table, # for fast operations on large data sets
psych, # A general purpose toolbox developed originally for personality, psychometric theory and experimental psychology.
visdat, # visualize missing values
tictoc, # timing
hexbin) # Bivariate Binning into Hexagon Cells
# Cite packages when you use them
citation("readxl")
sessionInfo() # to see everything about what is used in my current session.
today()
"2024-11-12"
# File-Info----
# The following code snippets and examples are by no means exhaustive and are
# intended to give a brief impression of R's functionality and explain the most
# important functions/methods.
# The main message of this section is to show possibilities and ways of thinking
# for data manipulation.
# A specific problem is usually solved in conjunction with online sources.
# ChatGPT, helps IMMENSELY in creating R code!
# Use Github Copilot for auto completion of code snippets!
# Many of the following explanations are based on
# https://r4ds.had.co.nz/introduction.html!
# https://r4ds.hadley.nz/ is the second edition.
# Thank you, Hadley!
# Many more free R introductions can be found online, see e.g., also YouTube.
# Also see the package learnr (top right under "Tutorial").
# Also see https://en.wikipedia.org/wiki/R_(programming_language) for an
# overview of the language itself.
# First things first:
# Why R (or Stata / SPSS / SAS....) and not just Excel? (see e.g., https://www.northeastern.edu/graduate/blog/r-vs-excel/)
# - ease-of-use: learning curve; point-and-click vs. programming
# - replicability
# - interaction with data, subsetting, transforming, visualizing ....
# - large datasets? (Since Excel 2007, a worksheet can contain 1,048,576 rows and 16,384 columns (A to XFD),
#   comprising 17,179,869,184 cells. Before that, the size was limited to 65,536 rows and 256 columns (A to IV), comprising 16,777,216 cells.)
#   Data sets with about one million to one billion records can also be processed in R, but need some additional effort
# - Price: R is free,
# - Speaking from experience: licenses are a pain!!
# - Expandability in Excel? -> packages in R!
# - ....
# Btw: For Excel, there is the R plug-in RExcel.
# 0) Before you start #####
# _RStudio layout----
# _How to setup your working environment-----
# - Relative paths (and trick below) or
# - RProjects (File -> New Project -> New Directory -> New Project)
# Trick: Set working directory to source file location:
setwd( dirname(rstudioapi::getSourceEditorContext()$path) )
getwd() # get working directory
# equivalent with:
# Menu: Session -> Set Working Directory -> To Source File Location
# _Execute a command from the script:----
# str/command + ENTER; or
# "Run" button (upper right)
# _What R-version do I have?---------
R.Version()
# Check if R-version is up-do-date automatically:
# If you have devtools installed:
devtools::source_url("https://github.com/jdegenfellner/ZHAW_Teaching/raw/main/Check_R_version_if_up_to_date.R")
# _R clear console: Command + L----
# _Clear (almost) entire RStudio:------
devtools::source_url("https://raw.githubusercontent.com/jdegenfellner/ZHAW_Teaching/main/Cleanup_RStudio.R")
# 1) Very basics ----
#
# c() concatenate
c(1,2)
x <- c(1,2,3,4,5) # create vector  .... "<-" assignment operator
x
x = c(1,2,3,4,5)
class(x) # "numeric"
d <- c("Yes","No") # create string vector
class(d) # "character"
x
( x <- c(1,2,3,4,5) ) # show result immediately
2 -> y # other direction also possible
y
y = 12 # also possible
12 = y # error
pacman::p_load(tidyverse, # https://tidyverse.tidyverse.org/
readxl,
writexl, # read write Excel files
DataExplorer, # Data overview
gtsummary, # Creates presentation-ready tables
table1, # nice table 1
flextable, # nicer tables
nycflights13, gapminder, Lahman, # data sets
devtools, # Collection of package development tools.
lubridate, # date functions
Hmisc, # Harrell Miscellaneous
data.table, # for fast operations on large data sets
psych, # A general purpose toolbox developed originally for personality, psychometric theory and experimental psychology.
visdat, # visualize missing values
tictoc, # timing
hexbin) # Bivariate Binning into Hexagon Cells
# Cite packages when you use them
citation("readxl")
sessionInfo() # to see everything about what is used in my current session.
today()
"2024-11-12"
# Trick: Set working directory to source file location:
setwd( dirname(rstudioapi::getSourceEditorContext()$path) )
getwd() # get working directory
# _What R-version do I have?---------
R.Version()
# Check if R-version is up-do-date automatically:
# If you have devtools installed:
devtools::source_url("https://github.com/jdegenfellner/ZHAW_Teaching/raw/main/Check_R_version_if_up_to_date.R")
# _Clear (almost) entire RStudio:------
devtools::source_url("https://raw.githubusercontent.com/jdegenfellner/ZHAW_Teaching/main/Cleanup_RStudio.R")
# 1) Very basics ----
#
# c() concatenate
c(1,2)
x <- c(1,2,3,4,5) # create vector  .... "<-" assignment operator
x
x = c(1,2,3,4,5)
class(x) # "numeric"
d <- c("Yes","No") # create string vector
class(d) # "character"
x
( x <- c(1,2,3,4,5) ) # show result immediately
2 -> y # other direction also possible
y
y = 12 # also possible
12 = y # error
rm(y) # remove y
y # object not found
# how to execute a primitive command, use R as calculator
1 + 2
sin(pi / 2)
log(12) # "ln"; natural log, Basis e
# important!!
?log # make use of the documentation by ? and function-name
help(log)
log( c(2,3) ) # function is applied to all elements in vector
log(2, base = 3) # basis 3
log(2,3,12) # error
# Naming conventions for variables?
# case sensitive
large_Variable <- 3
Large_Variable # not found
# sequences
seq(from = 1, to = 100, by = 2) # increase by 2 -> R create sequence....
y <- seq(1, 10, length.out = 5) # 5 equidistant points between 1 and 10
y
str(x) # structure, important!
flights
str(flights)
flights$year # go into column and show vector
flights$year[1] # first element
flights$year[1:10] # first 10 elements
class(flights)
View(flights) # opens new tab with non-editable overview
class(x)
class(flights)
x <- "2"
x*2 # error; Error in x * 2 : non-numeric argument to binary operator
log(2)
# simple statistics in base R:
mean(flights$arr_time) # NA (non applicable)
is.na(flights$arr_time) # logical vector
sum(is.na(flights$arr_time)) # how many NAs?
mean(flights$arr_time, na.rm = TRUE) # remove NAs; = 1502.055
mean(y) # mean {base}
median(y)
median(c(2,3,4,12)) # 3.5
median(c(2,3,4,120)) # 3.5 -> robust against outlier
median( c(x,y) ) # error, different type
median(c(2,3,4,12), c(45,2,3,1)) # What does this do?
x <- rnorm(1000) # sample of 1000 random number with X ~ N(mean = 0, sd = 1)
hist(x) # histogram in base R (later with ggplot2) -> see also: https://github.com/jdegenfellner/ZHAW_Teaching/blob/main/Density_plot_boxplot_below.R
boxplot(x) # base R boxplot
mean(x) # mean is an estimator for the population mean ~ 0
median(x)
sum(x <= -0.06026) # how many values are smaller than -0.06026?
sd(x) # standard deviation ~ 1
var(x) # variance # "erwartungstreu" (im Durchschnitt korrekt)
1/(length(x)-1)*sum( (x-mean(x))^2 ) # same
summary(x) # univariate summary: Min, 1st Quartile, Median, Mean, 3rd Quartile, Max
# Create functions:
polynom <- function(x, y = 4){ # y has default value of 4
x^2 + 3*x + 5*x*y + y^3 # last value is returned
}
polynom(1) # 1^1 + 3*1 + 5*1*4 + 4^3
1^1 + 3*1 + 5*1*4 + 4^3
polynom(x = 1,y = 0) # y = 0
polynom_useless <- function(x, y = 4){ # y has default value of 4
x^2 + 3*x + 5*x*y + y^3 # last value is returned
return(23) # please return the value 23 and ignore what came before
}
polynom_useless(x = 2, y = 4) # 23
# loops (that I need the most)
for(i in 1:5){
print(i)
}
for( i in c(1,-3,5,7) ){
print(i^3)
} # 1^2 3^2 5^2 ...
# sometimes a while loop is useful
i <- 1
while(i < 10){
print(i)
i <- i + 1
}
# 2) Data Visualization ----
str(mpg) # tibble vs data.frame # structure
class(mpg)
is.data.frame(mpg) # TRUE
is.numeric(mpg$manufacturer) # FALSE
is.numeric(mpg$year) # TRUE
View(mpg)
create_report(mpg) # DataExplorer, creates a quick overview as html
# conversions
mpg <- as.data.table(mpg)
# conversions
mpg <- as.data.table(mpg)
mpg <- as_tibble(mpg)
is.data.frame(mpg) # TRUE
x <- c("1", "3", "5")
x
x[3]*3 # error
class(x)
x <- as.numeric(x) # conversion
x
is.numeric(x) # TRUE
?mpg # data set included in ggplot2
# Fuel economy data from 1999 to 2008 for 38 popular models of cars
View(mpg)
# What other data sets are in R?
?datasets # package ‘datasets’
library(help = "datasets")
# "$" Operator
mpg$trans
mpg$manufacturer[100:110] # elements 100 to 110 in manufacturer vector
# How to look at data in detail
mpg[1:10,] # first 10 rows
mpg[1:10, 2:3] # only rows 1 to 10 and columns 2 and 3
mpg[, 2:3] # all rows and columns 2 and 3
mpg[1:10, c("displ", "cyl")]
mpg[1:10, c("displ", "cyl")]$cyl
mpg[1:10, 4:7]
# change a single entry in a data set
mpg_ <- mpg
mpg_[1,1] <- "audi_neu"
mpg_[1,1]
mpg_
mpg[1:10, c("displ", "cyl")]
mpg[1:10, c(3,5)]
head(mpg) # show first 10 rows
tail(mpg, n = 12) # show last 10 rows
headTail(mpg) # first and last rows (package psych)
mpg
# Base R commands:
table(mpg$manufacturer) # frequency table
table(mpg$manufacturer)/sum(table(mpg$manufacturer))*100 # relative frequencies
sum(table(mpg$manufacturer)/sum(table(mpg$manufacturer))*100) # = 100 %
barplot( table(mpg$manufacturer) )
cor(mpg$displ, mpg$hwy) # correlation (Pearson)
plot(mpg$displ, mpg$hwy) # Scatterplot, x-y
# versus using ggplot2
mpg %>%  # so-called pipe operator (also included in R by now as "|>")
ggplot(aes(x = fct_infreq(manufacturer) %>% fct_rev())) + # GPT: What does this command do...?"
geom_bar(stat = "count") + # add a barplot
coord_flip() + # flip the plot
xlab("") + ylab("") + # no labels
ggtitle("Title of the plot") +
theme(plot.title = element_text(hjust = 0.5))
# base R Plot:
plot(mpg$displ, mpg$hwy)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy), position = "jitter")
ggplot(data = mpg) # creates an empty plot!
mpg <- mpg %>% mutate(cat_hwy = case_when(
displ < 4 ~ "green",
displ >= 4 & displ <= 6 ~ "blue",
displ > 6 ~ "red"
))
p <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(aes(color = cat_hwy), position = position_jitter(width = 0.1, height = 0.1)) +
geom_smooth(method = "loess", se = FALSE) +
#geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatterplot for Displacement and Highway Mileage") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.title = element_blank()) +
scale_color_manual(values = c("green" = "green", "blue" = "blue", "red" = "red"))
p
# What are the red dots and relatively fuel efficient points in the plot?
# Package "dplyr" by Hadley Wickham.
mpg %>% dplyr::filter(displ > 6 & hwy > 20)
# inefficient cars with displ > 6?
mpg %>% filter(displ > 6 & hwy < 20)
summary(mpg)
dim(mpg) # number of rows and cols
mpg[2,4]
#mpg[2,4] <- 1998 # change single entry
mpg[2,4]*2
as.numeric(mpg[2,4]) # convert to numeric
mpg[ order(mpg$manufacturer, decreasing = TRUE), ] # change order, sort in descending order for manufacturer
# or with dplyr:
mpg %>% arrange(desc(manufacturer)) # descending
# or with dplyr:
mpg %>% arrange(desc(manufacturer)) # descending
# error
# or with dplyr:
mpg %>% arrange(desc(manufacturer)) # descending
pacman::p_load(tidyverse, # https://tidyverse.tidyverse.org/
readxl,
writexl, # read write Excel files
DataExplorer, # Data overview
gtsummary, # Creates presentation-ready tables
table1, # nice table 1
flextable, # nicer tables
nycflights13, gapminder, Lahman, # data sets
devtools, # Collection of package development tools.
lubridate, # date functions
Hmisc, # Harrell Miscellaneous
data.table, # for fast operations on large data sets
psych, # A general purpose toolbox developed originally for personality, psychometric theory and experimental psychology.
visdat, # visualize missing values
tictoc, # timing
hexbin,
broman) # Bivariate Binning into Hexagon Cells
?broman
library(broman)
library(broman)
# Very useful:
colnames(mpg) # column names of data frame
colnames(mpg)[1]
unique(mpg$class) # unique entries in vector
mpg$class
unique(mpg$class) # unique entries in vector
table(mpg$class) # frequency table (absolute frequence table)
table(mpg$class)/sum(table(mpg$class))*100 # relative frequencies
sum(table(mpg$class))
dim(mpg)
table(mpg$class)/sum(table(mpg$class))*100 # relative frequencies
ggplot()
mpg %>% ggplot() +
geom_point(aes(x = displ, y = hwy, color = class))
# One more dimension as information: car class
mpg %>% ggplot() +
geom_point(aes(x = displ, y = hwy, color = class)) +  # different colors for vehicle class
ggtitle("Title")
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy), color = "blue") +
xlab("displacement") +
ggtitle("Titel") # + ......
# nice feature: split plot into subplots
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2) # stratify the plots after "class"
# two categorical variables
mpg %>% ggplot() +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)  + # 12 sub groups -> 3 are empty; stratify by cyl and drv
ggtitle("Mileage vs displacement categorized via zylinders and drive train") +
xlab("engine displacement, in litres") +
ylab("highway miles per gallon") +
theme(plot.title = element_text(hjust = 0.5))
colnames(mpg)
head(mpg)
1999:2001
ggplot(data = mpg) +
dplyr::filter(year %in% 1999:2001)
# nice feature: split plot into subplots
mpg %>% dplyr::filter(year %in% 1999:2001) %>%
ggplot() +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2) # stratify the plots after "class"
mpg %>% dplyr::filter(year %in% 1999:2001)
# two categorical variables
mpg %>% ggplot() +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)  + # 12 sub groups -> 3 are empty; stratify by cyl and drv
ggtitle("Mileage vs displacement categorized via zylinders and drive train") +
xlab("engine displacement, in litres") +
ylab("highway miles per gallon") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap(drv ~ cyl)  + # 9 sub groups, the empty ones are omitted here
ggtitle("Mileage vs displacement categorized via zylinders and drive train") +
xlab("engine displacement, in litres") +
ylab("highway miles per gallon")
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth() # add a smoothing line; https://en.wikipedia.org/wiki/Local_regression
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(method = "lm") # add a smoothing line; https://en.wikipedia.org/wiki/Local_regression
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(method = "loess") # add a smoothing line; https://en.wikipedia.org/wiki/Local_regression
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy), position = "jitter") # standard for parameter position="identity"
?geom_jitter
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy), position = "jitter") # standard for parameter position="identity"
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(method = "lm") # "lm"=linear model. least squares estimated regression line
?datasets
library(help = "datasets")
diamonds
?diamonds
# further examples
# data set diamonds
ggplot(data = diamonds) +
geom_bar(aes(x = cut)) # simple bar chart
ggplot(data = diamonds) +
geom_bar(
aes(x = cut, fill = cut), # fill: R has 657 built-in named colours, which can be listed with grDevices::colors().
show.legend = FALSE, # no legend
width = 0.5 # Bar width. By default, set to 90% of the resolution of the data.
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
ggplot(data = diamonds) +
geom_bar(
aes(x = cut, fill = cut), # fill: R has 657 built-in named colours, which can be listed with grDevices::colors().
show.legend = FALSE, # no legend
width = 0.5 # Bar width. By default, set to 90% of the resolution of the data.
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar <- ggplot(data = diamonds) +
geom_bar(
aes(x = cut, fill = cut), # fill: R has 657 built-in named colours, which can be listed with grDevices::colors().
show.legend = FALSE, # no legend
width = 0.5 # Bar width. By default, set to 90% of the resolution of the data.
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL) # keine Labels
bar <- ggplot(data = diamonds) +
geom_bar(
aes(x = cut, fill = cut), # fill: R has 657 built-in named colours, which can be listed with grDevices::colors().
show.legend = FALSE, # no legend
width = 0.5 # Bar width. By default, set to 90% of the resolution of the data.
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL) # keine Labels
bar + coord_flip() # now graph is shown
bar + coord_polar()
# 3.1) Read directly from the web:--------
crab <- read.table("http://faculty.washington.edu/kenrice/rintro/crab.txt", # source
sep = " ", # column separator, here space
dec = ".", # decimal point
header = TRUE) # use first column for column names
# sep="\t" would read tab-separated files, always check the raw file to see the separator!
str(crab)
View(crab) # works only in RStudio
colnames(crab)
colnames(crab)[1]
colnames(crab)[3]
crab$width
crab$width*10
# create new variable and add to data set
crab$new_var <- crab$width*10 # base R
colnames(crab)
crab %>% mutate(new_var_3 = width*10)
# or
#crab <- as.data.table(crab)
#crab[, new_var_1 := width*10] # data.table syntax
# or
crab <- crab %>% mutate(new_var_3 = width*10) # dplyr
crab
crab %>%
dplyr::select(last_col(2):last_col()) # explicitely take "select" from dplyr (sometimes you have packages loaded with identical command-names...)
# Delete Variable/Spalte:
crab$new_var_1 <- NULL # base R
crab %>% head()
# Delete Variable/Spalte:
crab$new_var_3 <- NULL # base R
crab %>% head()
crab %>% dplyr::select(-new_var)
# or
#crab[, new_var_1 := NULL] # data.table syntax
# or
crab <- crab %>% dplyr::select(-new_var)
crab %>% head()
?read_xlsx
# Excel:
df <- readxl::read_xlsx("./Data/bike_excel_small.xlsx") # Note that there is (in my case) another command with the identical name in the package officer, hence I added the "readxl::"
# Excel:
getwd() # get working directory
str(df)
df$dteday
df$dteday <- as.POSIXct(df$dteday, format = "%d.%m.%Y") # Create date
df$dteday
df$dteday
str(df)
df$dteday[1]
df$dteday[2]
# We can now compare dates
df$dteday[1] < df$dteday[2] # TRUE
