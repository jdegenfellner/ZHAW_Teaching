theme(axis.text.x = element_text(angle = 45, hjust = 1))
df %>%
filter(
!is.na(SRI_no_imputation),
!is.na(OCQ550),
OCQ550 != 7,  # Exclude 'Refused'
OCQ550 != 9   # Exclude 'Don't know'
) %>%
filter(SRI_no_imputation > -10) %>%
group_by(OCQ550) %>%
mutate(median_SRI = median(SRI_no_imputation, na.rm = TRUE)) %>%
ungroup() %>%
mutate(OCQ550 = reorder(factor(OCQ550), median_SRI)) %>%
ggplot(aes(x = OCQ550, y = SRI_no_imputation)) +
geom_boxplot() +
labs(
x = "Ever exposed to exhaust fumes at work (OCQ550)",
y = "SRI_no_imputation",
title = "Boxplot of SRI_no_imputation by Exposure to Exhaust Fumes"
) +
scale_x_discrete(labels = c(
"1" = "Yes",
"2" = "No"
)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Code for tracking work hours at ZHAW #
# Especially single activities (work for projects, teaching and co)
# should be tracked in more detail to gain knowledge about my productivity
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load packages-----------------------------------------------------------------
library(pacman)
pacman::p_load(readxl, tidyverse, lubridate, writexl
)
# 1) READ (until first NA in column "KW")---------------------------------------
# Read function for multiple sheets
read_zeiterfassung <- function(sheets){
if(length(sheets) == 1){
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets)
first_NA <- min(which(is.na(ze$KW)))
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets, n_max = first_NA)
} else if (length(sheets) > 1) {
n <- length(sheets)
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[1])
first_NA <- min(which(is.na(ze$KW)))
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[1], n_max = first_NA)
for(i in 2:n){
ze_add <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[i])
if( sum(is.na(ze_add$KW)) == 0 ) {
read_to <- dim(ze_add)[1]
} else {
read_to <- min(which(is.na(ze_add$KW)))
}
ze_add <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[i], n_max = read_to)
ze <- rbind(ze, ze_add)
}
}
return(ze)
}
sheets = c("Jan23", "Feb23", "Mar23", "Apr23", "May23","Jun23",
"Jul23","Aug23","Sep23", "Okt23","Nov23", "Dez23",
"Jan24", "Feb24", "Mar24", "Apr24", "May24","Jun24",
"Jul24","Aug24")
ze <- read_zeiterfassung(sheets = sheets)
# 2) ADAPT input----------------------------------------------------------------
ze <- ze %>% dplyr::select(-Dauer) %>%
mutate(Dauer = Ende - Beginn) %>%
relocate(Dauer, .after = Ende) %>%
mutate(Wochentag_label = lubridate::wday(Wochentag, label = TRUE)) %>%
relocate(Wochentag_label, .after = Wochentag) %>%
dplyr::select(-Wochentag)
if( attr(ze$Dauer, which = "units") == "hours" ){
ze$Dauer <- ze$Dauer*60
}
ze$Dauer_ohne_Pausen <- ifelse(ze$Taetigkeit_allg == "Mittag" |
ze$Taetigkeit_allg == "Pause"|
ze$Taetigkeit_allg == "Dissertation", 0, ze$Dauer)
# 3) Statistics-----------------------------------------------------------------
# __Daily hours ----------------------------------------------------------------
ze %>% dplyr::group_by(Datum) %>%
dplyr::summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
mutate(Wochentag = lubridate::wday(Datum, label = TRUE)) %>%
relocate(Wochentag, .after = Datum) %>% tail()
# Only weekdays:
#ze %>%
#  filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
#  group_by(Datum) %>%
#  summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/60) %>%
# mutate(Wochentag = wday(Datum, label = TRUE)) %>%
#  relocate(Wochentag, .after = Datum) %>%
#  filter(Tagesarbeitszeit_ohne_Pausen > 0 )
# __Global mean, weekdays: ----
# TODO average working hours have to be calculated using ALL days but divide
# by the number of working days, otherwise work hours on weekends are lost.
ze %>%
filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
group_by(Datum) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
mutate(Wochentag = lubridate::wday(Datum, label = TRUE)) %>%
relocate(Wochentag, .after = Datum) %>%
filter(Tagesarbeitszeit_ohne_Pausen > 0) %>%
summarise(global_mean_workdays = mean(Tagesarbeitszeit_ohne_Pausen, na.rm = TRUE))
# # Global mean, weekdays (all):
# __Weekly h, Mo-Fr ------------------------------------------------------------
ze %>% group_by(KW) %>%
filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
summarise(Wochenarbeitszeiten_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
tail()
# __Weekend hours --------------------------------------------------------------
#ze %>% group_by(KW) %>%
#  filter(Wochentag_label %in% c("Sat","Sun")) %>%
#  summarise(Wochenende_Arbeitszeiten_ohne_Pausen = sum(Dauer_ohne_Pausen)/60)
# BOOKING in Pro-Time ----------------------------------------------------------
(df <- ze %>% filter(Taetigkeit_allg != "Mittag",
Taetigkeit_allg != "Pause",
Taetigkeit_allg != "Dissertation") %>%
filter(month(Datum) == 8 & year(Datum) == 2024) %>% # Feb=2/Mar=3...
group_by(Taetigkeit_allg) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600))
filename <- paste0("summary_", "Aug24", ".xlsx")
write_xlsx(df, filename)
# total work time: today ----
ze %>%
group_by(Taetigkeit_allg) %>%
filter(Datum == ze$Datum[length(ze$Datum)]) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: yesterday ----
ze %>%
group_by(Taetigkeit_allg) %>%
filter(Datum == ze$Datum[length(ze$Datum)] - days(1)) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: current week ----
ze %>%
mutate(week = week(Datum), year = year(Datum)) %>%
filter(week == week(today()) & year == year(today())) %>%
dplyr::group_by(Taetigkeit_allg) %>%
dplyr::summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE) / 3600) %>%
dplyr::summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: SPECIFIC month ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(month(Datum) == 6 & year(Datum) == 2024) %>% # Feb=2/Mar=3...
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# Average working hours per working day for the rest of the month, beginning-----
# tomorrow
soll <- 184.8 # jun24
current <- 108
tot_work_left <- soll - current
today <- Sys.Date()
first_day_month <- as.Date(paste(year(today), month(today), "01", sep="-"))
first_day_month
last_day_month <- as.Date(paste(year(today), month(today),
as.integer(format(as.Date(paste(year(today), month(today)+1, "01", sep="-"))-1, "%d")),
sep="-"))
last_day_month
date_seq <- seq(today, last_day_month, by="day")
date_seq
working_days_left <- sum(!weekdays(date_seq) %in% c("Saturday", "Sunday"))
tot_work_left/working_days_left
# total work time: current month ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(year(Datum) == 2024 & month(Datum) == 8) %>% # Feb=2/Mar=3...
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: previous month ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(month(Datum) == month(now())-1) %>% # Feb=2/Mar=3...
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: Year 23 ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(year(Datum) == 2023) %>% # Feb=2/Mar=3...
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# 2250. Jan23-Dez23, Soll August bis August 2103
# total work time: Year 24 ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(year(Datum) == 2024) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# TODO check----
# total work time: 7 days----
ze_filtered <- ze %>%
mutate(Datum = as.Date(Datum)) %>%  # Umwandeln von POSIXct in Date
filter(Datum >= as.Date(now()) - 7) %>%
group_by(Datum) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE) / 3600)
total_work_hours <- sum(ze_filtered$Tagesarbeitszeit_ohne_Pausen)
ggplot(ze_filtered, aes(x = Datum, y = Tagesarbeitszeit_ohne_Pausen)) +
geom_bar(stat = "identity", fill = "blue") +
scale_x_date(date_labels = "%d %b", date_breaks = "1 day") +
geom_hline(yintercept = 8.4) +
labs(title = paste("Summe der Arbeitsstunden in den letzten 7 Tagen:", round(total_work_hours,1), "Stunden"),
x = "Datum",
y = "Arbeitsstunden") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10, hjust = 0.5))
# Actual-work-hours----
jan23 <- 179
feb23 <- 167
mar23 <- 215
apr23 <- 165
may23 <- 192
jun23 <- 179
jul23 <- 172
aug23 <- 200
sep23 <- 176.4
okt23 <- 189
nov23 <- 204
dec23 <- 197 # soll 159.6
jan24 <- 171 # soll 176.4
feb24 <- 168 # soll 168
mar24 <- 196 # soll 193.2
apr24 <- 165 # soll 148.76
may24 <- 199 # soll 165.56
jun24 <- 176 # soll 184.8
jul24 <- 191 # soll 176.4
aug24 <- 182 # soll 184.4?
# Soll/Ist Vergleich (23/24)----
soll <- c(176.4, 159.6, 193.2, 148.76, 165.65, 184.8,
176.4, 184.8, 176.4, 184.8, 184.8, 159.6,
176.4, 168, 193.2, 148.76, 165.56, 184.8, 176.4, 184.4) # (see Excel-file....SJ_22-23_Brutto-Arbeitszeiten)
(ist_soll <- c(jan23, feb23, mar23, apr23, may23, jun23,
jul23, aug23, sep23, okt23, nov23, dec23,
jan24, feb24, mar24, apr24, may24, jun24,
jul24, aug24) - soll)
sum(ist_soll)
as.Date(now())
as.Date(now()) - 7
as.Date(Datum)
ggplot(ze_filtered, aes(x = Datum, y = Tagesarbeitszeit_ohne_Pausen)) +
geom_bar(stat = "identity", fill = "blue") +
scale_x_date(date_labels = "%d %b", date_breaks = "1 day") +
geom_hline(yintercept = 8.4) +
labs(title = paste("Summe der Arbeitsstunden in den letzten 7 Tagen:", round(total_work_hours,1), "Stunden"),
x = "Datum",
y = "Arbeitsstunden") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10, hjust = 0.5))
# Code for tracking work hours at ZHAW #
# Especially single activities (work for projects, teaching and co)
# should be tracked in more detail to gain knowledge about my productivity
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load packages-----------------------------------------------------------------
library(pacman)
pacman::p_load(readxl, tidyverse, lubridate, writexl
)
# 1) READ (until first NA in column "KW")---------------------------------------
# Read function for multiple sheets
read_zeiterfassung <- function(sheets){
if(length(sheets) == 1){
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets)
first_NA <- min(which(is.na(ze$KW)))
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets, n_max = first_NA)
} else if (length(sheets) > 1) {
n <- length(sheets)
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[1])
first_NA <- min(which(is.na(ze$KW)))
ze <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[1], n_max = first_NA)
for(i in 2:n){
ze_add <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[i])
if( sum(is.na(ze_add$KW)) == 0 ) {
read_to <- dim(ze_add)[1]
} else {
read_to <- min(which(is.na(ze_add$KW)))
}
ze_add <- readxl::read_xlsx("Zeitaufzeichnung.xlsx", sheet = sheets[i], n_max = read_to)
ze <- rbind(ze, ze_add)
}
}
return(ze)
}
sheets = c("Jan23", "Feb23", "Mar23", "Apr23", "May23","Jun23",
"Jul23","Aug23","Sep23", "Okt23","Nov23", "Dez23",
"Jan24", "Feb24", "Mar24", "Apr24", "May24","Jun24",
"Jul24","Aug24","Sep24")
ze <- read_zeiterfassung(sheets = sheets)
# 2) ADAPT input----------------------------------------------------------------
ze <- ze %>% dplyr::select(-Dauer) %>%
mutate(Dauer = Ende - Beginn) %>%
relocate(Dauer, .after = Ende) %>%
mutate(Wochentag_label = lubridate::wday(Wochentag, label = TRUE)) %>%
relocate(Wochentag_label, .after = Wochentag) %>%
dplyr::select(-Wochentag)
if( attr(ze$Dauer, which = "units") == "hours" ){
ze$Dauer <- ze$Dauer*60
}
ze$Dauer_ohne_Pausen <- ifelse(ze$Taetigkeit_allg == "Mittag" |
ze$Taetigkeit_allg == "Pause"|
ze$Taetigkeit_allg == "Dissertation", 0, ze$Dauer)
# 3) Statistics-----------------------------------------------------------------
# __Daily hours ----------------------------------------------------------------
ze %>% dplyr::group_by(Datum) %>%
dplyr::summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
mutate(Wochentag = lubridate::wday(Datum, label = TRUE)) %>%
relocate(Wochentag, .after = Datum) %>% tail()
# Only weekdays:
#ze %>%
#  filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
#  group_by(Datum) %>%
#  summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/60) %>%
# mutate(Wochentag = wday(Datum, label = TRUE)) %>%
#  relocate(Wochentag, .after = Datum) %>%
#  filter(Tagesarbeitszeit_ohne_Pausen > 0 )
# __Global mean, weekdays: ----
# TODO average working hours have to be calculated using ALL days but divide
# by the number of working days, otherwise work hours on weekends are lost.
ze %>%
filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
group_by(Datum) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
mutate(Wochentag = lubridate::wday(Datum, label = TRUE)) %>%
relocate(Wochentag, .after = Datum) %>%
filter(Tagesarbeitszeit_ohne_Pausen > 0) %>%
summarise(global_mean_workdays = mean(Tagesarbeitszeit_ohne_Pausen, na.rm = TRUE))
# # Global mean, weekdays (all):
# __Weekly h, Mo-Fr ------------------------------------------------------------
ze %>% group_by(KW) %>%
filter(Wochentag_label %in% c("Mon","Tue","Wed","Thu","Fri")) %>%
summarise(Wochenarbeitszeiten_ohne_Pausen = sum(Dauer_ohne_Pausen)/60) %>%
tail()
# __Weekend hours --------------------------------------------------------------
#ze %>% group_by(KW) %>%
#  filter(Wochentag_label %in% c("Sat","Sun")) %>%
#  summarise(Wochenende_Arbeitszeiten_ohne_Pausen = sum(Dauer_ohne_Pausen)/60)
# BOOKING in Pro-Time ----------------------------------------------------------
(df <- ze %>% filter(Taetigkeit_allg != "Mittag",
Taetigkeit_allg != "Pause",
Taetigkeit_allg != "Dissertation") %>%
filter(month(Datum) == 8 & year(Datum) == 2024) %>% # Feb=2/Mar=3...
group_by(Taetigkeit_allg) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600))
filename <- paste0("summary_", "Aug24", ".xlsx")
write_xlsx(df, filename)
# total work time: today ----
ze %>%
group_by(Taetigkeit_allg) %>%
filter(Datum == ze$Datum[length(ze$Datum)]) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: yesterday ----
ze %>%
group_by(Taetigkeit_allg) %>%
filter(Datum == ze$Datum[length(ze$Datum)] - days(1)) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: current week ----
ze %>%
mutate(week = week(Datum), year = year(Datum)) %>%
filter(week == week(today()) & year == year(today())) %>%
dplyr::group_by(Taetigkeit_allg) %>%
dplyr::summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE) / 3600) %>%
dplyr::summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: SPECIFIC month ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(month(Datum) == 6 & year(Datum) == 2024) %>% # Feb=2/Mar=3...
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# Average working hours per working day for the rest of the month, beginning-----
# tomorrow
soll <- 184.8 # jun24
current <- 108
tot_work_left <- soll - current
today <- Sys.Date()
first_day_month <- as.Date(paste(year(today), month(today), "01", sep="-"))
first_day_month
last_day_month <- as.Date(paste(year(today), month(today),
as.integer(format(as.Date(paste(year(today), month(today)+1, "01", sep="-"))-1, "%d")),
sep="-"))
last_day_month
date_seq <- seq(today, last_day_month, by="day")
date_seq
working_days_left <- sum(!weekdays(date_seq) %in% c("Saturday", "Sunday"))
tot_work_left/working_days_left
# total work time: current month ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(year(Datum) == 2024 & month(Datum) == 8) %>% # Feb=2/Mar=3...
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: previous month ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(month(Datum) == month(now())-1) %>% # Feb=2/Mar=3...
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# total work time: Year 23 ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(year(Datum) == 2023) %>% # Feb=2/Mar=3...
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# 2250. Jan23-Dez23, Soll August bis August 2103
# total work time: Year 24 ----
ze %>% group_by(Taetigkeit_allg) %>%
filter(year(Datum) == 2024) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE)/3600) %>%
summarise(total_work_time = sum(Tagesarbeitszeit_ohne_Pausen))
# TODO check----
# total work time: 7 days----
ze_filtered <- ze %>%
mutate(Datum = as.Date(Datum)) %>%  # Umwandeln von POSIXct in Date
filter(Datum >= as.Date(now()) - 7) %>%
group_by(Datum) %>%
summarise(Tagesarbeitszeit_ohne_Pausen = sum(Dauer_ohne_Pausen, na.rm = TRUE) / 3600)
total_work_hours <- sum(ze_filtered$Tagesarbeitszeit_ohne_Pausen)
ggplot(ze_filtered, aes(x = Datum, y = Tagesarbeitszeit_ohne_Pausen)) +
geom_bar(stat = "identity", fill = "blue") +
scale_x_date(date_labels = "%d %b", date_breaks = "1 day") +
geom_hline(yintercept = 8.4) +
labs(title = paste("Summe der Arbeitsstunden in den letzten 7 Tagen:", round(total_work_hours,1), "Stunden"),
x = "Datum",
y = "Arbeitsstunden") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10, hjust = 0.5))
# Actual-work-hours----
jan23 <- 179
feb23 <- 167
mar23 <- 215
apr23 <- 165
may23 <- 192
jun23 <- 179
jul23 <- 172
aug23 <- 200
sep23 <- 176.4
okt23 <- 189
nov23 <- 204
dec23 <- 197 # soll 159.6
jan24 <- 171 # soll 176.4
feb24 <- 168 # soll 168
mar24 <- 196 # soll 193.2
apr24 <- 165 # soll 148.76
may24 <- 199 # soll 165.56
jun24 <- 176 # soll 184.8
jul24 <- 191 # soll 176.4
aug24 <- 182 # soll 184.4?
# Soll/Ist Vergleich (23/24)----
soll <- c(176.4, 159.6, 193.2, 148.76, 165.65, 184.8,
176.4, 184.8, 176.4, 184.8, 184.8, 159.6,
176.4, 168, 193.2, 148.76, 165.56, 184.8, 176.4, 184.4) # (see Excel-file....SJ_22-23_Brutto-Arbeitszeiten)
(ist_soll <- c(jan23, feb23, mar23, apr23, may23, jun23,
jul23, aug23, sep23, okt23, nov23, dec23,
jan24, feb24, mar24, apr24, may24, jun24,
jul24, aug24) - soll)
sum(ist_soll)
4000/60
library(pacman)
p_load(tidyverse)
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Generiere eine sample aus einer Zufallszahl (wir wissen hier, wie diese
# verteilt ist):
x <- rnorm(10000, mean = 23.4, sd = 5.6)
df <- data.frame(values = x)
p2 <- ggplot(df, aes(x = values)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, alpha = 0.7, color="darkgrey") +
geom_density(aes(y = after_stat(density)), color = "blue", linewidth=1) +  # Verwenden Sie hier `linewidth` anstelle von `size`
geom_boxplot(aes(y = -0.01, x = values), width = 0.02, position = position_nudge(y = -0.00)) +
geom_point(aes(y = -0.01),
position = position_jitter(width = 0.002, height = 0.01),
size = 1, alpha = 0.05) +
ggtitle("Histogram with density plot and boxplot below") +
theme(plot.title = element_text(hjust = 0.5))
p2
df %>%
filter(
!is.na(SRI_no_imputation),
!is.na(OCD392)
) %>%
filter(SRI_no_imputation > -10) %>%
group_by(OCD392) %>%
mutate(median_SRI = median(SRI_no_imputation, na.rm = TRUE)) %>%
ungroup() %>%
mutate(OCD392 = reorder(factor(OCD392), median_SRI)) %>%
ggplot(aes(x = OCD392, y = SRI_no_imputation)) +
geom_boxplot() +
labs(
x = "Occupation Group Code: Longest Job (OCD392)",
y = "SRI_no_imputation",
title = "Boxplot of SRI_no_imputation by Occupation Group (Longest Job)"
) +
scale_x_discrete(labels = c(
"1" = "Management Occupations",
"2" = "Business, Financial Operations Occupations",
"3" = "Computer, Mathematical Occupations",
"4" = "Architecture, Engineering Occupations",
"5" = "Life, Physical, Social Science Occupations",
"6" = "Community, Social Services Occupations",
"7" = "Legal Occupations",
"8" = "Education, Training, Library Occupations",
"9" = "Arts, Design, Entertainment, Sports, Media Occupations",
"10" = "Healthcare Practitioner, Technical Occupations",
"11" = "Healthcare Support Occupations",
"12" = "Protective Service Occupations",
"13" = "Food Preparation, Serving Occupations",
"14" = "Building & Grounds Cleaning, Maintenance Occupations",
"15" = "Personal Care, Service Occupations",
"16" = "Sales & Related Occupations",
"17" = "Office, Administrative Support Occupations",
"18" = "Farming, Fishing, Forestry Occupations",
"19" = "Construction, Extraction Occupations",
"20" = "Installation, Maintenance, Repair Occupations",
"21" = "Production Occupations",
"22" = "Transportation, Material Moving Occupations",
"23" = "Armed Forces"
)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
